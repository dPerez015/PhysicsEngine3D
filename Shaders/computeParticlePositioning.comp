#version 430
layout(std430, binding = 0) buffer initialPos{vec4 initPos[];};
layout(std430, binding = 1) buffer finalPos{vec4 fPos[];};
layout(std430, binding = 2) buffer finalVel{vec4 fVel[];};
layout(std430, binding = 3) buffer relativePos{vec4 relPos[];};
layout(std430, binding = 4) buffer rigidbodyPos{vec4 rbPos[];};
layout(std430, binding = 5) buffer rigidbodyVel{vec4 rbVel[];};
layout(std430, binding = 6) buffer rigidbodyAngVel{vec4 rbAngVel[];};
layout(std430, binding = 7) buffer rigidbodyRotation{vec4 rbRot[];};
layout(std430, binding = 10) buffer theGrid{ivec4 grid[];};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

uniform float minX;
uniform float minY;
uniform float minZ;

uniform float gridVoxelSize;
uniform int gridSize;

vec3 rotateVectorByQuat(vec3 v, vec4 q){
	return 2.0f*dot(q.xyz,v) * q.xyz + (q.w*q.w - dot(q.xyz,q.xyz))*v + 2.0f * q.w *cross(q.xyz,v);
}

void main(){
//------------ indexes ------------
	uint gid = gl_GlobalInvocationID.x;
	uint rbID = int(initPos[gid].w);
//------------- relative position ------------------
	vec4 relativePos = vec4(rotateVectorByQuat(initPos[gid].xyz, rbRot[rbID]),1.0f);
	relPos[gid]=relativePos;

//-------------- absolute position ----------------------- 
	vec4 finalPos = relativePos+rbPos[rbID];
	fPos[gid] = finalPos; //el ultimo ha de ser un 1 para que funcione el render de particulas

//-------------- velocity ------------------
	fVel[gid] = rbVel[rbID] +  vec4(cross(rbAngVel[rbID].xyz,relativePos.xyz),0.f);


//--------------- grid ------------------
	int gridX=int(clamp(floor((finalPos.x-minX)/gridVoxelSize),0,gridSize));
	
	float checkIsSmaller = step(0,gridX);
	float checkIsBigger = step(gridSize, gridX);
	gridX = gridX *int(checkIsSmaller * (1-checkIsBigger));

	int gridY=int(clamp(floor((finalPos.y-minY)/gridVoxelSize),0,gridSize));
	checkIsSmaller *= step(0,gridY);
	checkIsBigger *= step(gridSize,gridY);
	gridY = gridY *int(checkIsSmaller * (1- checkIsBigger));

	int gridZ=int(clamp(floor((finalPos.z-minZ)/gridVoxelSize),0,gridSize));
	checkIsSmaller *= step(0,gridZ);
	checkIsBigger *= step(gridSize,gridZ);
	gridZ = gridZ * int(checkIsSmaller * (1-checkIsBigger));
	
	int voxelID = gridX + gridY * gridSize + gridZ*gridSize*gridSize;

	ivec4 previusGridValue = grid[voxelID];
	int idToInsert = ((int(gid) + 1)* int(checkIsSmaller * (1-checkIsBigger))) - 1;

	previusGridValue = previusGridValue.axyz;
	int previusId = previusGridValue.a;
	
	idToInsert = max(idToInsert, previusId);

	previusGridValue.x = int(idToInsert);
	
	grid[voxelID] = previusGridValue;
	//grid[gid] = ivec4(idToInsert,0,0,0);
	
}

